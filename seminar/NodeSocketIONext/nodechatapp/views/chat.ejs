<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>모든 사용자간 채팅하기</h1>

    <form id = "chatForm">
        <input type="text" id="nickName"/>
        <input type="text" id="message"/>
        <button type="submit">전송</button>
    </form>

    <ul id = "chatHistory">
        
    </ul>

    <!-- jquery CDN 참조하기-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    
    <!-- socket.io javascript library 참조  -->
    <script src="/socket.io/socket.io.js"></script>

    <script>
        //클라이언트(웹브라우저) 서버연결소켓객체정의
        //io객체는 /socket.io/socket.io.js socket.io클라이언트 라이브러리에서 제공하는 객체로
        //서버소케(socket.js)과의 연결 및 통신을 담당하는 클라이언트 측 객체이다.
        //io.connect("연결하려는 메시지서버 주소")
        var socket = io.connect('/');

        //소켓이라는 객체를 통해 서버로 메시지를 보내거나 서버에서 전송된 메시지 수신이 가능합니다. 

        //채팅 메시지 전송 처리 기능 구현
        $("#chatForm").submit(function (e) {

            //폼이벤트로 화면 재부팅 현상 방지하기
            e.preventDefault();

            //해당 UI요소에서 입력된 닉네임/사용자 메시지 값을 추출합니다.
            var nickName = $("#nickName").val();
            var message = $("#message").val();

            //서버로 전송할 메시지 데이터 정의
            var msgData = `${nickName}:${message}`;

            //서버소켓에 사용자 입력한 메시지를 전송합니다.
            //socket.emit('서버에서 보면 데이터를 수신할 서버 이벤트 수신기명', 서버로 전송할 데이터);
            socket.emit("broadcast", msgData);
        });


        //서버 소켓에서 전송된 메시지 수신기 정의하기
        //socket.on("서버에서 보내준 메시지를 받을 클라이언트 수신기명", 서버에서 보내준 수신데이터를 처리할 콜백함수)
        socket.on("receiveAll", function (msg) {
            console.log("서버에서 보내준 메시지는?:", msg);

            $("#chatHistory").append(`<li>${msg}</li>`);
        });
      </script>

</body>
</html>